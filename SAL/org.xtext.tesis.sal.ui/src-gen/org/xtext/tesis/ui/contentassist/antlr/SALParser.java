/*
* generated by Xtext
*/
package org.xtext.tesis.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.tesis.services.SALGrammarAccess;

public class SALParser extends AbstractContentAssistParser {
	
	@Inject
	private SALGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.tesis.ui.contentassist.antlr.internal.InternalSALParser createParser() {
		org.xtext.tesis.ui.contentassist.antlr.internal.InternalSALParser result = new org.xtext.tesis.ui.contentassist.antlr.internal.InternalSALParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDeclarationsAccess().getAlternatives(), "rule__Declarations__Alternatives");
					put(grammarAccess.getValueSetAccess().getAlternatives(), "rule__ValueSet__Alternatives");
					put(grammarAccess.getContextAccess().getGroup(), "rule__Context__Group__0");
					put(grammarAccess.getBodyAccess().getGroup(), "rule__Body__Group__0");
					put(grammarAccess.getTypeDeclarationAccess().getGroup(), "rule__TypeDeclaration__Group__0");
					put(grammarAccess.getModuleDeclarationAccess().getGroup(), "rule__ModuleDeclaration__Group__0");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getDeclarationsAccess().getGroup_0(), "rule__Declarations__Group_0__0");
					put(grammarAccess.getDeclarationsAccess().getGroup_1(), "rule__Declarations__Group_1__0");
					put(grammarAccess.getDeclarationsAccess().getGroup_2(), "rule__Declarations__Group_2__0");
					put(grammarAccess.getDeclarationsAccess().getGroup_3(), "rule__Declarations__Group_3__0");
					put(grammarAccess.getDeclarationsAccess().getGroup_4(), "rule__Declarations__Group_4__0");
					put(grammarAccess.getDeclarationsAccess().getGroup_5(), "rule__Declarations__Group_5__0");
					put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
					put(grammarAccess.getSubrangeAccess().getGroup(), "rule__Subrange__Group__0");
					put(grammarAccess.getInitialisationAccess().getGroup(), "rule__Initialisation__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getGuardAccess().getGroup(), "rule__Guard__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getContextAccess().getContextNameAssignment_0(), "rule__Context__ContextNameAssignment_0");
					put(grammarAccess.getContextAccess().getBodyAssignment_2(), "rule__Context__BodyAssignment_2");
					put(grammarAccess.getBodyAccess().getTypesAssignment_1(), "rule__Body__TypesAssignment_1");
					put(grammarAccess.getBodyAccess().getModuleAssignment_2(), "rule__Body__ModuleAssignment_2");
					put(grammarAccess.getTypeDeclarationAccess().getTypeNameAssignment_0(), "rule__TypeDeclaration__TypeNameAssignment_0");
					put(grammarAccess.getTypeDeclarationAccess().getTypeValuesAssignment_2(), "rule__TypeDeclaration__TypeValuesAssignment_2");
					put(grammarAccess.getModuleDeclarationAccess().getModuleNameAssignment_0(), "rule__ModuleDeclaration__ModuleNameAssignment_0");
					put(grammarAccess.getModuleDeclarationAccess().getModuleAssignment_2(), "rule__ModuleDeclaration__ModuleAssignment_2");
					put(grammarAccess.getModuleAccess().getDeclarationAssignment_1(), "rule__Module__DeclarationAssignment_1");
					put(grammarAccess.getDeclarationsAccess().getVariableDeclarationsAssignment_0_1(), "rule__Declarations__VariableDeclarationsAssignment_0_1");
					put(grammarAccess.getDeclarationsAccess().getVariableDeclarationsAssignment_1_1(), "rule__Declarations__VariableDeclarationsAssignment_1_1");
					put(grammarAccess.getDeclarationsAccess().getVariableDeclarationsAssignment_2_1(), "rule__Declarations__VariableDeclarationsAssignment_2_1");
					put(grammarAccess.getDeclarationsAccess().getDefinitionsAssignment_3_1(), "rule__Declarations__DefinitionsAssignment_3_1");
					put(grammarAccess.getDeclarationsAccess().getInitialisationsAssignment_4_1(), "rule__Declarations__InitialisationsAssignment_4_1");
					put(grammarAccess.getDeclarationsAccess().getTransitionsAssignment_5_1(), "rule__Declarations__TransitionsAssignment_5_1");
					put(grammarAccess.getVarDeclAccess().getVariableNameAssignment_0(), "rule__VarDecl__VariableNameAssignment_0");
					put(grammarAccess.getVarDeclAccess().getValueSetAssignment_2(), "rule__VarDecl__ValueSetAssignment_2");
					put(grammarAccess.getScalarAccess().getNameAssignment(), "rule__Scalar__NameAssignment");
					put(grammarAccess.getSubrangeAccess().getLowerBoundAssignment_1(), "rule__Subrange__LowerBoundAssignment_1");
					put(grammarAccess.getSubrangeAccess().getUpperBoundAssignment_3(), "rule__Subrange__UpperBoundAssignment_3");
					put(grammarAccess.getInitialisationAccess().getVariableAssignment_0(), "rule__Initialisation__VariableAssignment_0");
					put(grammarAccess.getInitialisationAccess().getValueAssignment_2(), "rule__Initialisation__ValueAssignment_2");
					put(grammarAccess.getTransitionAccess().getTransitionNumerAssignment_0(), "rule__Transition__TransitionNumerAssignment_0");
					put(grammarAccess.getTransitionAccess().getGuardsAssignment_2(), "rule__Transition__GuardsAssignment_2");
					put(grammarAccess.getTransitionAccess().getAssignmentsAssignment_4(), "rule__Transition__AssignmentsAssignment_4");
					put(grammarAccess.getGuardAccess().getVariableAssignment_0(), "rule__Guard__VariableAssignment_0");
					put(grammarAccess.getGuardAccess().getValueAssignment_2(), "rule__Guard__ValueAssignment_2");
					put(grammarAccess.getAssignmentAccess().getVariableAssignment_0(), "rule__Assignment__VariableAssignment_0");
					put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.tesis.ui.contentassist.antlr.internal.InternalSALParser typedParser = (org.xtext.tesis.ui.contentassist.antlr.internal.InternalSALParser) parser;
			typedParser.entryRuleContext();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SALGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SALGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
