/*
* generated by Xtext
*/
package org.xtext.tesis.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SALGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cContextNameAssignment_0.eContents().get(0);
		private final Keyword cCONTEXTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Context:
		//	contextName=STRING ": CONTEXT=" body=Body;
		public ParserRule getRule() { return rule; }

		//contextName=STRING ": CONTEXT=" body=Body
		public Group getGroup() { return cGroup; }

		//contextName=STRING
		public Assignment getContextNameAssignment_0() { return cContextNameAssignment_0; }

		//STRING
		public RuleCall getContextNameSTRINGTerminalRuleCall_0_0() { return cContextNameSTRINGTerminalRuleCall_0_0; }

		//": CONTEXT="
		public Keyword getCONTEXTKeyword_1() { return cCONTEXTKeyword_1; }

		//body=Body
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Body
		public RuleCall getBodyBodyParserRuleCall_2_0() { return cBodyBodyParserRuleCall_2_0; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBEGINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesTypeDeclarationParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Assignment cModuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModuleModuleDeclarationParserRuleCall_2_0 = (RuleCall)cModuleAssignment_2.eContents().get(0);
		private final Keyword cENDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Body:
		//	"BEGIN" types+=TypeDeclaration module=ModuleDeclaration "END";
		public ParserRule getRule() { return rule; }

		//"BEGIN" types+=TypeDeclaration module=ModuleDeclaration "END"
		public Group getGroup() { return cGroup; }

		//"BEGIN"
		public Keyword getBEGINKeyword_0() { return cBEGINKeyword_0; }

		//types+=TypeDeclaration
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }

		//TypeDeclaration
		public RuleCall getTypesTypeDeclarationParserRuleCall_1_0() { return cTypesTypeDeclarationParserRuleCall_1_0; }

		//module=ModuleDeclaration
		public Assignment getModuleAssignment_2() { return cModuleAssignment_2; }

		//ModuleDeclaration
		public RuleCall getModuleModuleDeclarationParserRuleCall_2_0() { return cModuleModuleDeclarationParserRuleCall_2_0; }

		//"END"
		public Keyword getENDKeyword_3() { return cENDKeyword_3; }
	}

	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cTypeNameAssignment_0.eContents().get(0);
		private final Keyword cTYPEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeValuesSTRINGTerminalRuleCall_2_0 = (RuleCall)cTypeValuesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeDeclaration:
		//	typeName=STRING ": TYPE={" typeValues+=STRING "};";
		public ParserRule getRule() { return rule; }

		//typeName=STRING ": TYPE={" typeValues+=STRING "};"
		public Group getGroup() { return cGroup; }

		//typeName=STRING
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }

		//STRING
		public RuleCall getTypeNameSTRINGTerminalRuleCall_0_0() { return cTypeNameSTRINGTerminalRuleCall_0_0; }

		//": TYPE={"
		public Keyword getTYPEKeyword_1() { return cTYPEKeyword_1; }

		//typeValues+=STRING
		public Assignment getTypeValuesAssignment_2() { return cTypeValuesAssignment_2; }

		//STRING
		public RuleCall getTypeValuesSTRINGTerminalRuleCall_2_0() { return cTypeValuesSTRINGTerminalRuleCall_2_0; }

		//"};"
		public Keyword getRightCurlyBracketSemicolonKeyword_3() { return cRightCurlyBracketSemicolonKeyword_3; }
	}

	public class ModuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModuleNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cModuleNameAssignment_0.eContents().get(0);
		private final Keyword cMODULEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModuleModuleParserRuleCall_2_0 = (RuleCall)cModuleAssignment_2.eContents().get(0);
		
		//ModuleDeclaration:
		//	moduleName=STRING ": MODULE=" module=Module;
		public ParserRule getRule() { return rule; }

		//moduleName=STRING ": MODULE=" module=Module
		public Group getGroup() { return cGroup; }

		//moduleName=STRING
		public Assignment getModuleNameAssignment_0() { return cModuleNameAssignment_0; }

		//STRING
		public RuleCall getModuleNameSTRINGTerminalRuleCall_0_0() { return cModuleNameSTRINGTerminalRuleCall_0_0; }

		//": MODULE="
		public Keyword getMODULEKeyword_1() { return cMODULEKeyword_1; }

		//module=Module
		public Assignment getModuleAssignment_2() { return cModuleAssignment_2; }

		//Module
		public RuleCall getModuleModuleParserRuleCall_2_0() { return cModuleModuleParserRuleCall_2_0; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBEGINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationDeclarationsParserRuleCall_1_0 = (RuleCall)cDeclarationAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Module:
		//	"BEGIN" declaration+=Declarations "END";
		public ParserRule getRule() { return rule; }

		//"BEGIN" declaration+=Declarations "END"
		public Group getGroup() { return cGroup; }

		//"BEGIN"
		public Keyword getBEGINKeyword_0() { return cBEGINKeyword_0; }

		//declaration+=Declarations
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }

		//Declarations
		public RuleCall getDeclarationDeclarationsParserRuleCall_1_0() { return cDeclarationDeclarationsParserRuleCall_1_0; }

		//"END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class DeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declarations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cINPUTKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVariableDeclarationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariableDeclarationsVarDeclParserRuleCall_0_1_0 = (RuleCall)cVariableDeclarationsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOUTPUTKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariableDeclarationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableDeclarationsVarDeclParserRuleCall_1_1_0 = (RuleCall)cVariableDeclarationsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLOCALKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableDeclarationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableDeclarationsVarDeclParserRuleCall_2_1_0 = (RuleCall)cVariableDeclarationsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cDEFINITIONKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefinitionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_3_1_0 = (RuleCall)cDefinitionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cINITIALIZATIONKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialisationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialisationsInitialisationParserRuleCall_4_1_0 = (RuleCall)cInitialisationsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cTRANSITIONKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTransitionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_5_1_0 = (RuleCall)cTransitionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Declarations:
		//	"INPUT" variableDeclarations+=VarDecl | "OUTPUT" variableDeclarations+=VarDecl | "LOCAL" variableDeclarations+=VarDecl
		//	| "DEFINITION" definitions+=Definition | "INITIALIZATION" initialisations+=Initialisation | "TRANSITION ["
		//	transitions+=Transition "]";
		public ParserRule getRule() { return rule; }

		//"INPUT" variableDeclarations+=VarDecl | "OUTPUT" variableDeclarations+=VarDecl | "LOCAL" variableDeclarations+=VarDecl |
		//"DEFINITION" definitions+=Definition | "INITIALIZATION" initialisations+=Initialisation | "TRANSITION ["
		//transitions+=Transition "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"INPUT" variableDeclarations+=VarDecl
		public Group getGroup_0() { return cGroup_0; }

		//"INPUT"
		public Keyword getINPUTKeyword_0_0() { return cINPUTKeyword_0_0; }

		//variableDeclarations+=VarDecl
		public Assignment getVariableDeclarationsAssignment_0_1() { return cVariableDeclarationsAssignment_0_1; }

		//VarDecl
		public RuleCall getVariableDeclarationsVarDeclParserRuleCall_0_1_0() { return cVariableDeclarationsVarDeclParserRuleCall_0_1_0; }

		//"OUTPUT" variableDeclarations+=VarDecl
		public Group getGroup_1() { return cGroup_1; }

		//"OUTPUT"
		public Keyword getOUTPUTKeyword_1_0() { return cOUTPUTKeyword_1_0; }

		//variableDeclarations+=VarDecl
		public Assignment getVariableDeclarationsAssignment_1_1() { return cVariableDeclarationsAssignment_1_1; }

		//VarDecl
		public RuleCall getVariableDeclarationsVarDeclParserRuleCall_1_1_0() { return cVariableDeclarationsVarDeclParserRuleCall_1_1_0; }

		//"LOCAL" variableDeclarations+=VarDecl
		public Group getGroup_2() { return cGroup_2; }

		//"LOCAL"
		public Keyword getLOCALKeyword_2_0() { return cLOCALKeyword_2_0; }

		//variableDeclarations+=VarDecl
		public Assignment getVariableDeclarationsAssignment_2_1() { return cVariableDeclarationsAssignment_2_1; }

		//VarDecl
		public RuleCall getVariableDeclarationsVarDeclParserRuleCall_2_1_0() { return cVariableDeclarationsVarDeclParserRuleCall_2_1_0; }

		//"DEFINITION" definitions+=Definition
		public Group getGroup_3() { return cGroup_3; }

		//"DEFINITION"
		public Keyword getDEFINITIONKeyword_3_0() { return cDEFINITIONKeyword_3_0; }

		//definitions+=Definition
		public Assignment getDefinitionsAssignment_3_1() { return cDefinitionsAssignment_3_1; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_3_1_0() { return cDefinitionsDefinitionParserRuleCall_3_1_0; }

		//"INITIALIZATION" initialisations+=Initialisation
		public Group getGroup_4() { return cGroup_4; }

		//"INITIALIZATION"
		public Keyword getINITIALIZATIONKeyword_4_0() { return cINITIALIZATIONKeyword_4_0; }

		//initialisations+=Initialisation
		public Assignment getInitialisationsAssignment_4_1() { return cInitialisationsAssignment_4_1; }

		//Initialisation
		public RuleCall getInitialisationsInitialisationParserRuleCall_4_1_0() { return cInitialisationsInitialisationParserRuleCall_4_1_0; }

		//"TRANSITION [" transitions+=Transition "]"
		public Group getGroup_5() { return cGroup_5; }

		//"TRANSITION ["
		public Keyword getTRANSITIONKeyword_5_0() { return cTRANSITIONKeyword_5_0; }

		//transitions+=Transition
		public Assignment getTransitionsAssignment_5_1() { return cTransitionsAssignment_5_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_5_1_0() { return cTransitionsTransitionParserRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cVariableNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueSetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSetValueSetParserRuleCall_2_0 = (RuleCall)cValueSetAssignment_2.eContents().get(0);
		
		//VarDecl:
		//	variableName=STRING ":" valueSet=ValueSet;
		public ParserRule getRule() { return rule; }

		//variableName=STRING ":" valueSet=ValueSet
		public Group getGroup() { return cGroup; }

		//variableName=STRING
		public Assignment getVariableNameAssignment_0() { return cVariableNameAssignment_0; }

		//STRING
		public RuleCall getVariableNameSTRINGTerminalRuleCall_0_0() { return cVariableNameSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//valueSet=ValueSet
		public Assignment getValueSetAssignment_2() { return cValueSetAssignment_2; }

		//ValueSet
		public RuleCall getValueSetValueSetParserRuleCall_2_0() { return cValueSetValueSetParserRuleCall_2_0; }
	}

	public class ValueSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubrangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValueSet:
		//	Scalar | Subrange;
		public ParserRule getRule() { return rule; }

		//Scalar | Subrange
		public Alternatives getAlternatives() { return cAlternatives; }

		//Scalar
		public RuleCall getScalarParserRuleCall_0() { return cScalarParserRuleCall_0; }

		//Subrange
		public RuleCall getSubrangeParserRuleCall_1() { return cSubrangeParserRuleCall_1; }
	}

	public class ScalarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scalar");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Scalar:
		//	name=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class SubrangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subrange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundINTTerminalRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundINTTerminalRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Subrange:
		//	"[" lowerBound=INT ".." upperBound=INT "]";
		public ParserRule getRule() { return rule; }

		//"[" lowerBound=INT ".." upperBound=INT "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=INT
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_1_0() { return cLowerBoundINTTerminalRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }

		//upperBound=INT
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_3_0() { return cUpperBoundINTTerminalRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Keyword cTOBECONTINUEDKeyword = (Keyword)rule.eContents().get(1);
		
		//Definition:
		//	"TO BE CONTINUED";
		public ParserRule getRule() { return rule; }

		//"TO BE CONTINUED"
		public Keyword getTOBECONTINUEDKeyword() { return cTOBECONTINUEDKeyword; }
	}

	public class InitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Initialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableSTRINGTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Initialisation:
		//	variable=STRING "=" value=STRING ";";
		public ParserRule getRule() { return rule; }

		//variable=STRING "=" value=STRING ";"
		public Group getGroup() { return cGroup; }

		//variable=STRING
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//STRING
		public RuleCall getVariableSTRINGTerminalRuleCall_0_0() { return cVariableSTRINGTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransitionNumerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTransitionNumerSTRINGTerminalRuleCall_0_0 = (RuleCall)cTransitionNumerAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardsGuardParserRuleCall_2_0 = (RuleCall)cGuardsAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAssignmentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_4_0 = (RuleCall)cAssignmentsAssignment_4.eContents().get(0);
		
		//Transition:
		//	transitionNumer=STRING ":" guards+=Guard* "-->" assignments+=Assignment*;
		public ParserRule getRule() { return rule; }

		//transitionNumer=STRING ":" guards+=Guard* "-->" assignments+=Assignment*
		public Group getGroup() { return cGroup; }

		//transitionNumer=STRING
		public Assignment getTransitionNumerAssignment_0() { return cTransitionNumerAssignment_0; }

		//STRING
		public RuleCall getTransitionNumerSTRINGTerminalRuleCall_0_0() { return cTransitionNumerSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//guards+=Guard*
		public Assignment getGuardsAssignment_2() { return cGuardsAssignment_2; }

		//Guard
		public RuleCall getGuardsGuardParserRuleCall_2_0() { return cGuardsGuardParserRuleCall_2_0; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_3; }

		//assignments+=Assignment*
		public Assignment getAssignmentsAssignment_4() { return cAssignmentsAssignment_4; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_4_0() { return cAssignmentsAssignmentParserRuleCall_4_0; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableSTRINGTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Guard:
		//	variable=STRING "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//variable=STRING "=" value=STRING
		public Group getGroup() { return cGroup; }

		//variable=STRING
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//STRING
		public RuleCall getVariableSTRINGTerminalRuleCall_0_0() { return cVariableSTRINGTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableSTRINGTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cApostropheEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//	variable=STRING "\'=" value=STRING;
		public ParserRule getRule() { return rule; }

		//variable=STRING "\'=" value=STRING
		public Group getGroup() { return cGroup; }

		//variable=STRING
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//STRING
		public RuleCall getVariableSTRINGTerminalRuleCall_0_0() { return cVariableSTRINGTerminalRuleCall_0_0; }

		//"\'="
		public Keyword getApostropheEqualsSignKeyword_1() { return cApostropheEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private ContextElements pContext;
	private BodyElements pBody;
	private TypeDeclarationElements pTypeDeclaration;
	private ModuleDeclarationElements pModuleDeclaration;
	private ModuleElements pModule;
	private DeclarationsElements pDeclarations;
	private VarDeclElements pVarDecl;
	private ValueSetElements pValueSet;
	private ScalarElements pScalar;
	private SubrangeElements pSubrange;
	private DefinitionElements pDefinition;
	private InitialisationElements pInitialisation;
	private TransitionElements pTransition;
	private GuardElements pGuard;
	private AssignmentElements pAssignment;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SALGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.tesis.SAL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Context:
	//	contextName=STRING ": CONTEXT=" body=Body;
	public ContextElements getContextAccess() {
		return (pContext != null) ? pContext : (pContext = new ContextElements());
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}

	//Body:
	//	"BEGIN" types+=TypeDeclaration module=ModuleDeclaration "END";
	public BodyElements getBodyAccess() {
		return (pBody != null) ? pBody : (pBody = new BodyElements());
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//TypeDeclaration:
	//	typeName=STRING ": TYPE={" typeValues+=STRING "};";
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return (pTypeDeclaration != null) ? pTypeDeclaration : (pTypeDeclaration = new TypeDeclarationElements());
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//ModuleDeclaration:
	//	moduleName=STRING ": MODULE=" module=Module;
	public ModuleDeclarationElements getModuleDeclarationAccess() {
		return (pModuleDeclaration != null) ? pModuleDeclaration : (pModuleDeclaration = new ModuleDeclarationElements());
	}
	
	public ParserRule getModuleDeclarationRule() {
		return getModuleDeclarationAccess().getRule();
	}

	//Module:
	//	"BEGIN" declaration+=Declarations "END";
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Declarations:
	//	"INPUT" variableDeclarations+=VarDecl | "OUTPUT" variableDeclarations+=VarDecl | "LOCAL" variableDeclarations+=VarDecl
	//	| "DEFINITION" definitions+=Definition | "INITIALIZATION" initialisations+=Initialisation | "TRANSITION ["
	//	transitions+=Transition "]";
	public DeclarationsElements getDeclarationsAccess() {
		return (pDeclarations != null) ? pDeclarations : (pDeclarations = new DeclarationsElements());
	}
	
	public ParserRule getDeclarationsRule() {
		return getDeclarationsAccess().getRule();
	}

	//VarDecl:
	//	variableName=STRING ":" valueSet=ValueSet;
	public VarDeclElements getVarDeclAccess() {
		return (pVarDecl != null) ? pVarDecl : (pVarDecl = new VarDeclElements());
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	//ValueSet:
	//	Scalar | Subrange;
	public ValueSetElements getValueSetAccess() {
		return (pValueSet != null) ? pValueSet : (pValueSet = new ValueSetElements());
	}
	
	public ParserRule getValueSetRule() {
		return getValueSetAccess().getRule();
	}

	//Scalar:
	//	name=STRING;
	public ScalarElements getScalarAccess() {
		return (pScalar != null) ? pScalar : (pScalar = new ScalarElements());
	}
	
	public ParserRule getScalarRule() {
		return getScalarAccess().getRule();
	}

	//Subrange:
	//	"[" lowerBound=INT ".." upperBound=INT "]";
	public SubrangeElements getSubrangeAccess() {
		return (pSubrange != null) ? pSubrange : (pSubrange = new SubrangeElements());
	}
	
	public ParserRule getSubrangeRule() {
		return getSubrangeAccess().getRule();
	}

	//Definition:
	//	"TO BE CONTINUED";
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Initialisation:
	//	variable=STRING "=" value=STRING ";";
	public InitialisationElements getInitialisationAccess() {
		return (pInitialisation != null) ? pInitialisation : (pInitialisation = new InitialisationElements());
	}
	
	public ParserRule getInitialisationRule() {
		return getInitialisationAccess().getRule();
	}

	//Transition:
	//	transitionNumer=STRING ":" guards+=Guard* "-->" assignments+=Assignment*;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Guard:
	//	variable=STRING "=" value=STRING;
	public GuardElements getGuardAccess() {
		return (pGuard != null) ? pGuard : (pGuard = new GuardElements());
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//Assignment:
	//	variable=STRING "\'=" value=STRING;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
