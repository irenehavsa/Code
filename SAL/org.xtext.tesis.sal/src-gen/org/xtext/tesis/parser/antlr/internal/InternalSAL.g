/*
* generated by Xtext
*/
grammar InternalSAL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.tesis.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.tesis.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.tesis.services.SALGrammarAccess;

}

@parser::members {

 	private SALGrammarAccess grammarAccess;
 	
    public InternalSALParser(TokenStream input, SALGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Context";	
   	}
   	
   	@Override
   	protected SALGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	 iv_ruleContext=ruleContext 
	 { $current=$iv_ruleContext.current; } 
	 EOF 
;

// Rule Context
ruleContext returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_contextName_0_0=RULE_STRING
		{
			newLeafNode(lv_contextName_0_0, grammarAccess.getContextAccess().getContextNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContextRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"contextName",
        		lv_contextName_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=': CONTEXT=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContextAccess().getCONTEXTKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getBodyBodyParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"Body");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	 iv_ruleBody=ruleBody 
	 { $current=$iv_ruleBody.current; } 
	 EOF 
;

// Rule Body
ruleBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BEGIN' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBodyAccess().getBEGINKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getTypesTypeDeclarationParserRuleCall_1_0()); 
	    }
		lv_types_1_0=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_1_0, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getModuleModuleDeclarationParserRuleCall_2_0()); 
	    }
		lv_module_2_0=ruleModuleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_2_0, 
        		"ModuleDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='END' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBodyAccess().getENDKeyword_3());
    }
)
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_typeName_0_0=RULE_STRING
		{
			newLeafNode(lv_typeName_0_0, grammarAccess.getTypeDeclarationAccess().getTypeNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeName",
        		lv_typeName_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=': TYPE={' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeDeclarationAccess().getTYPEKeyword_1());
    }
(
(
		lv_typeValues_2_0=RULE_STRING
		{
			newLeafNode(lv_typeValues_2_0, grammarAccess.getTypeDeclarationAccess().getTypeValuesSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"typeValues",
        		lv_typeValues_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='};' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDeclarationAccess().getRightCurlyBracketSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleModuleDeclaration
entryRuleModuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleDeclarationRule()); }
	 iv_ruleModuleDeclaration=ruleModuleDeclaration 
	 { $current=$iv_ruleModuleDeclaration.current; } 
	 EOF 
;

// Rule ModuleDeclaration
ruleModuleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_moduleName_0_0=RULE_STRING
		{
			newLeafNode(lv_moduleName_0_0, grammarAccess.getModuleDeclarationAccess().getModuleNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"moduleName",
        		lv_moduleName_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=': MODULE=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleDeclarationAccess().getMODULEKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleDeclarationAccess().getModuleModuleParserRuleCall_2_0()); 
	    }
		lv_module_2_0=ruleModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_2_0, 
        		"Module");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BEGIN' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getBEGINKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getDeclarationDeclarationsParserRuleCall_1_0()); 
	    }
		lv_declaration_1_0=ruleDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_0, 
        		"Declarations");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='END' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getENDKeyword_2());
    }
)
;





// Entry rule entryRuleDeclarations
entryRuleDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationsRule()); }
	 iv_ruleDeclarations=ruleDeclarations 
	 { $current=$iv_ruleDeclarations.current; } 
	 EOF 
;

// Rule Declarations
ruleDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='INPUT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclarationsAccess().getINPUTKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getVariableDeclarationsVarDeclParserRuleCall_0_1_0()); 
	    }
		lv_variableDeclarations_1_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"variableDeclarations",
        		lv_variableDeclarations_1_0, 
        		"VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='OUTPUT' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeclarationsAccess().getOUTPUTKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getVariableDeclarationsVarDeclParserRuleCall_1_1_0()); 
	    }
		lv_variableDeclarations_3_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"variableDeclarations",
        		lv_variableDeclarations_3_0, 
        		"VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='LOCAL' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDeclarationsAccess().getLOCALKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getVariableDeclarationsVarDeclParserRuleCall_2_1_0()); 
	    }
		lv_variableDeclarations_5_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"variableDeclarations",
        		lv_variableDeclarations_5_0, 
        		"VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_6='DEFINITION' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDeclarationsAccess().getDEFINITIONKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDefinitionsDefinitionParserRuleCall_3_1_0()); 
	    }
		lv_definitions_7_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_7_0, 
        		"Definition");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_8='INITIALIZATION' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDeclarationsAccess().getINITIALIZATIONKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getInitialisationsInitialisationParserRuleCall_4_1_0()); 
	    }
		lv_initialisations_9_0=ruleInitialisation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"initialisations",
        		lv_initialisations_9_0, 
        		"Initialisation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_10='TRANSITION [' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDeclarationsAccess().getTRANSITIONKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getTransitionsTransitionParserRuleCall_5_1_0()); 
	    }
		lv_transitions_11_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_11_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDeclarationsAccess().getRightSquareBracketKeyword_5_2());
    }
))
;





// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	 iv_ruleVarDecl=ruleVarDecl 
	 { $current=$iv_ruleVarDecl.current; } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_variableName_0_0=RULE_STRING
		{
			newLeafNode(lv_variableName_0_0, grammarAccess.getVarDeclAccess().getVariableNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variableName",
        		lv_variableName_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarDeclAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclAccess().getValueSetValueSetParserRuleCall_2_0()); 
	    }
		lv_valueSet_2_0=ruleValueSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclRule());
	        }
       		set(
       			$current, 
       			"valueSet",
        		lv_valueSet_2_0, 
        		"ValueSet");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValueSet
entryRuleValueSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueSetRule()); }
	 iv_ruleValueSet=ruleValueSet 
	 { $current=$iv_ruleValueSet.current; } 
	 EOF 
;

// Rule ValueSet
ruleValueSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueSetAccess().getScalarParserRuleCall_0()); 
    }
    this_Scalar_0=ruleScalar
    { 
        $current = $this_Scalar_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueSetAccess().getSubrangeParserRuleCall_1()); 
    }
    this_Subrange_1=ruleSubrange
    { 
        $current = $this_Subrange_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleScalar
entryRuleScalar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScalarRule()); }
	 iv_ruleScalar=ruleScalar 
	 { $current=$iv_ruleScalar.current; } 
	 EOF 
;

// Rule Scalar
ruleScalar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getScalarAccess().getNameSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScalarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleSubrange
entryRuleSubrange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubrangeRule()); }
	 iv_ruleSubrange=ruleSubrange 
	 { $current=$iv_ruleSubrange.current; } 
	 EOF 
;

// Rule Subrange
ruleSubrange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubrangeAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_lowerBound_1_0=RULE_INT
		{
			newLeafNode(lv_lowerBound_1_0, grammarAccess.getSubrangeAccess().getLowerBoundINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubrangeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"INT");
	    }

)
)	otherlv_2='..' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubrangeAccess().getFullStopFullStopKeyword_2());
    }
(
(
		lv_upperBound_3_0=RULE_INT
		{
			newLeafNode(lv_upperBound_3_0, grammarAccess.getSubrangeAccess().getUpperBoundINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubrangeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"INT");
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubrangeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); } 
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current.getText(); }  
	 EOF 
;

// Rule Definition
ruleDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='TO BE CONTINUED' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefinitionAccess().getTOBECONTINUEDKeyword()); 
    }

    ;





// Entry rule entryRuleInitialisation
entryRuleInitialisation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitialisationRule()); }
	 iv_ruleInitialisation=ruleInitialisation 
	 { $current=$iv_ruleInitialisation.current; } 
	 EOF 
;

// Rule Initialisation
ruleInitialisation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_variable_0_0=RULE_STRING
		{
			newLeafNode(lv_variable_0_0, grammarAccess.getInitialisationAccess().getVariableSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInitialisationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"STRING");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInitialisationAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getInitialisationAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInitialisationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInitialisationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_transitionNumer_0_0=RULE_STRING
		{
			newLeafNode(lv_transitionNumer_0_0, grammarAccess.getTransitionAccess().getTransitionNumerSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"transitionNumer",
        		lv_transitionNumer_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getGuardsGuardParserRuleCall_2_0()); 
	    }
		lv_guards_2_0=ruleGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"guards",
        		lv_guards_2_0, 
        		"Guard");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='-->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getAssignmentsAssignmentParserRuleCall_4_0()); 
	    }
		lv_assignments_4_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_4_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleGuard
entryRuleGuard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardRule()); }
	 iv_ruleGuard=ruleGuard 
	 { $current=$iv_ruleGuard.current; } 
	 EOF 
;

// Rule Guard
ruleGuard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_variable_0_0=RULE_STRING
		{
			newLeafNode(lv_variable_0_0, grammarAccess.getGuardAccess().getVariableSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGuardRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"STRING");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGuardAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getGuardAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGuardRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_variable_0_0=RULE_STRING
		{
			newLeafNode(lv_variable_0_0, grammarAccess.getAssignmentAccess().getVariableSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"STRING");
	    }

)
)	otherlv_1='\'=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getApostropheEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getAssignmentAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


